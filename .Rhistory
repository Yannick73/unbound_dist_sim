library(brms)
library(bayesim)
library(bayesfam)
library(dplyr)
library(purrr)
library(patchwork)
library(ggplot2)
library(ggthemes)
set.seed(1235813)
family_filter <- function(table, family_vector, filter_shape) {
for(filter_family in family_vector) {
table <- filter(table, !((data_family == filter_family) & (shape == filter_shape)))
}
return(table)
}
# RESULT_PATH <- NULL
# RESULT_PATH <- "~/Dokumente/simresults_N200_paper"
RESULT_PATH <- "/results_N200/simresults_N200_paper"
NCORES <- 3 # physical cores -1 or less
CLUSTER_TYPE <- "PSOCK"
SEED <- 1339
set.seed(SEED)
options(error = recover) # for easier debugging
DEBUG <- FALSE # unless you want every single simulation step written to disk
DATASET_N <- 200 # 5-10-ish for calibration, 200 for the final experiment
stan_pars <- list(
backend = "rstan",
cmdstan_path = NULL,
cmdstan_write_path = NULL,
warmup = 500,
iter = 1500,
chains = 1,
init = 0.1
)
metrics <- c(
"v_pos_prob",
"v_quantiles",
"divergent_transitions_rel",
"rhat",
"ess_bulk",
"ess_tail",
"data_gen",
"fit_gen"
)
VARS_OF_INTEREST = list(list(c("b_x")))
QUANTILES = list(list(c(0.025, 0.975)))
data_config <- expand.grid(
z1_x_coef = NA, # 0.5
z1_y_coef = NA, # 2
z2_y_coef = NA, # 2
z3_x_coef = NA, # 1
x_z4_coef = NA, # 1
y_z4_coef = NA, # 1
sigma_z1 = 1,
sigma_z2 = 1,
sigma_z3 = 1,
sigma_z4 = 1,
sigma_x = 1,
data_N = 100,
dataset_N = DATASET_N,
data_family = c(
"gaussian",
"student",
"skew_normal",
"generalized_normal",
"asym_laplace",
"exgaussian",
"gumbel",
"logistic",
"symlognormal"
),
data_link = c(
"identity"
),
lb = -Inf,
ub = Inf,
resample = 1.3,
x_y_coef = c(NA, 0),
y_intercept = NA,
sigma_y = list(NA),
shape = c(
"thin",
"wide",
"skewed"
),
noise_sd = 0.2, # not used in normal basedag
stringsAsFactors = FALSE
)
skew_filter <- c("gaussian", "student", "generalized_normal", "logistic")
data_config <- family_filter(data_config, skew_filter, "skewed")
data_config <- family_filter(data_config, "gumbel", "thin")
data_config <- family_filter(data_config, "exgaussian", "wide")
z1_x_vec <- c(0.3, -0.5, 0.8)
z1_y_vec <- c(0.3, 0.8, 0.4)
z2_y_vec <- c(0.2, 0.2, -0.5)
z3_x_vec <- c(0.2, 0.2, 0.6)
x_z4_vec <- c(0.4, 0.15, -0.1)
y_z4_vec <- c(-0.2, -0.35, -0.45)
x_y_list <- list(
"gaussian" = c(-0.33, 1.75),
"student" = c(-0.45, 1.75),
"skew_normal" = c(-0.35, 1.65, -0.45),
"generalized_normal" = c(-0.38, 1.8),
"asym_laplace" = c(-0.45, 1.65, -0.52),
"exgaussian" = c(-0.28, NA, -0.55),
"gumbel" = c(NA, 2.2, -0.5),
"logistic" = c(-0.4, 0.25),
"symlognormal" = c(-0.22, 0.7, -0.16)
)
sigma_y_list <- list(
"gaussian" = c(1, 5),
"student" = list(c(5, 0.95), c(8, 4.8)),
"skew_normal" = list(c(1, 0), c(5, 0), c(2, 10)),
"generalized_normal" = list(c(1.4, 2), c(7, 2)),
"asym_laplace" = list(c(0.5, 0.5), c(2.2, 0.5), c(0.4, 0.1)),
"exgaussian" = list(c(0.9, 0.5), NA, c(0.5, 3)), # wide form too unstable
"gumbel" = c(NA, 6, 1.6), # no thin, form (so NA). wide - skewed
"logistic" = c(0.63, 0.4),
"symlognormal" = c(0.7, 2, 0.5)
)
y_intercept_vec <- c(0, 0, -1.5)
shape_index_lookup <- list("thin" = 1, "wide" = 2, "skewed" = 3)
for (i in seq_len(nrow(data_config))) {
family <- data_config$data_family[[i]]
shape_name <- data_config$shape[[i]]
shape_index <- shape_index_lookup[[shape_name]]
data_config$z1_x_coef[[i]] <- z1_x_vec[shape_index]
data_config$z1_y_coef[[i]] <- z1_y_vec[shape_index]
data_config$z2_y_coef[[i]] <- z2_y_vec[shape_index]
data_config$z3_x_coef[[i]] <- z3_x_vec[shape_index]
data_config$x_z4_coef[[i]] <- x_z4_vec[shape_index]
data_config$y_z4_coef[[i]] <- y_z4_vec[shape_index]
if(is.na(data_config$x_y_coef[[i]])) {
data_config$x_y_coef[[i]] <- x_y_list[[family]][shape_index]
}
data_config$sigma_y[[i]] <- sigma_y_list[[family]][[shape_index]]
data_config$y_intercept[[i]] <- y_intercept_vec[shape_index]
}
data_config$id <- as.numeric(
rownames(data_config)
)
fit_config <- expand.grid(
fit_family = c(
"gaussian",
"student",
"skew_normal",
"generalized_normal",
"asym_laplace",
"exgaussian",
"gumbel",
"logistic",
"symlognormal"
),
fit_link = c(
"identity"
),
formula = c(
"y ~ x + z1 + z2",
"y ~ x + z1",
"y ~ x + z1 + z2 + z3",
"y ~ x + z2",
"y ~ x + z1 + z2 + z4"
),
stringsAsFactors = FALSE
)
fit_config$prior = c() # should stay empty for this
start_time <- Sys.time()
result_df <- full_simulation(
data_gen_confs = data_config,
data_gen_fun = basedag_data,
fit_confs = fit_config,
metrics = metrics,
ncores_simulation = NCORES,
cluster_type = CLUSTER_TYPE,
stan_pars = stan_pars,
seed = SEED,
result_path = RESULT_PATH,
debug = DEBUG,
calibration_mode = TRUE,
time_info = TRUE,
vars_of_interest = VARS_OF_INTEREST,
quantiles = QUANTILES,
model_compile_dir = "~/Dokumente/simmodels"
)
# RESULT_PATH <- NULL
# RESULT_PATH <- "~/Dokumente/simresults_N200_paper"
RESULT_PATH <- "results_N200/simresults_N200_paper"
NCORES <- 3 # physical cores -1 or less
CLUSTER_TYPE <- "PSOCK"
SEED <- 1339
set.seed(SEED)
options(error = recover) # for easier debugging
DEBUG <- FALSE # unless you want every single simulation step written to disk
DATASET_N <- 200 # 5-10-ish for calibration, 200 for the final experiment
stan_pars <- list(
backend = "rstan",
cmdstan_path = NULL,
cmdstan_write_path = NULL,
warmup = 500,
iter = 1500,
chains = 1,
init = 0.1
)
metrics <- c(
"v_pos_prob",
"v_quantiles",
"divergent_transitions_rel",
"rhat",
"ess_bulk",
"ess_tail",
"data_gen",
"fit_gen"
)
VARS_OF_INTEREST = list(list(c("b_x")))
QUANTILES = list(list(c(0.025, 0.975)))
data_config <- expand.grid(
z1_x_coef = NA, # 0.5
z1_y_coef = NA, # 2
z2_y_coef = NA, # 2
z3_x_coef = NA, # 1
x_z4_coef = NA, # 1
y_z4_coef = NA, # 1
sigma_z1 = 1,
sigma_z2 = 1,
sigma_z3 = 1,
sigma_z4 = 1,
sigma_x = 1,
data_N = 100,
dataset_N = DATASET_N,
data_family = c(
"gaussian",
"student",
"skew_normal",
"generalized_normal",
"asym_laplace",
"exgaussian",
"gumbel",
"logistic",
"symlognormal"
),
data_link = c(
"identity"
),
lb = -Inf,
ub = Inf,
resample = 1.3,
x_y_coef = c(NA, 0),
y_intercept = NA,
sigma_y = list(NA),
shape = c(
"thin",
"wide",
"skewed"
),
noise_sd = 0.2, # not used in normal basedag
stringsAsFactors = FALSE
)
skew_filter <- c("gaussian", "student", "generalized_normal", "logistic")
data_config <- family_filter(data_config, skew_filter, "skewed")
data_config <- family_filter(data_config, "gumbel", "thin")
data_config <- family_filter(data_config, "exgaussian", "wide")
z1_x_vec <- c(0.3, -0.5, 0.8)
z1_y_vec <- c(0.3, 0.8, 0.4)
z2_y_vec <- c(0.2, 0.2, -0.5)
z3_x_vec <- c(0.2, 0.2, 0.6)
x_z4_vec <- c(0.4, 0.15, -0.1)
y_z4_vec <- c(-0.2, -0.35, -0.45)
x_y_list <- list(
"gaussian" = c(-0.33, 1.75),
"student" = c(-0.45, 1.75),
"skew_normal" = c(-0.35, 1.65, -0.45),
"generalized_normal" = c(-0.38, 1.8),
"asym_laplace" = c(-0.45, 1.65, -0.52),
"exgaussian" = c(-0.28, NA, -0.55),
"gumbel" = c(NA, 2.2, -0.5),
"logistic" = c(-0.4, 0.25),
"symlognormal" = c(-0.22, 0.7, -0.16)
)
sigma_y_list <- list(
"gaussian" = c(1, 5),
"student" = list(c(5, 0.95), c(8, 4.8)),
"skew_normal" = list(c(1, 0), c(5, 0), c(2, 10)),
"generalized_normal" = list(c(1.4, 2), c(7, 2)),
"asym_laplace" = list(c(0.5, 0.5), c(2.2, 0.5), c(0.4, 0.1)),
"exgaussian" = list(c(0.9, 0.5), NA, c(0.5, 3)), # wide form too unstable
"gumbel" = c(NA, 6, 1.6), # no thin, form (so NA). wide - skewed
"logistic" = c(0.63, 0.4),
"symlognormal" = c(0.7, 2, 0.5)
)
y_intercept_vec <- c(0, 0, -1.5)
shape_index_lookup <- list("thin" = 1, "wide" = 2, "skewed" = 3)
for (i in seq_len(nrow(data_config))) {
family <- data_config$data_family[[i]]
shape_name <- data_config$shape[[i]]
shape_index <- shape_index_lookup[[shape_name]]
data_config$z1_x_coef[[i]] <- z1_x_vec[shape_index]
data_config$z1_y_coef[[i]] <- z1_y_vec[shape_index]
data_config$z2_y_coef[[i]] <- z2_y_vec[shape_index]
data_config$z3_x_coef[[i]] <- z3_x_vec[shape_index]
data_config$x_z4_coef[[i]] <- x_z4_vec[shape_index]
data_config$y_z4_coef[[i]] <- y_z4_vec[shape_index]
if(is.na(data_config$x_y_coef[[i]])) {
data_config$x_y_coef[[i]] <- x_y_list[[family]][shape_index]
}
data_config$sigma_y[[i]] <- sigma_y_list[[family]][[shape_index]]
data_config$y_intercept[[i]] <- y_intercept_vec[shape_index]
}
data_config$id <- as.numeric(
rownames(data_config)
)
fit_config <- expand.grid(
fit_family = c(
"gaussian",
"student",
"skew_normal",
"generalized_normal",
"asym_laplace",
"exgaussian",
"gumbel",
"logistic",
"symlognormal"
),
fit_link = c(
"identity"
),
formula = c(
"y ~ x + z1 + z2",
"y ~ x + z1",
"y ~ x + z1 + z2 + z3",
"y ~ x + z2",
"y ~ x + z1 + z2 + z4"
),
stringsAsFactors = FALSE
)
fit_config$prior = c() # should stay empty for this
start_time <- Sys.time()
result_df <- full_simulation(
data_gen_confs = data_config,
data_gen_fun = basedag_data,
fit_confs = fit_config,
metrics = metrics,
ncores_simulation = NCORES,
cluster_type = CLUSTER_TYPE,
stan_pars = stan_pars,
seed = SEED,
result_path = RESULT_PATH,
debug = DEBUG,
calibration_mode = TRUE,
time_info = TRUE,
vars_of_interest = VARS_OF_INTEREST,
quantiles = QUANTILES,
model_compile_dir = "~/Dokumente/simmodels"
)
end_time <- Sys.time()
print(end_time - start_time)
cols <- c("formula", "data_family", "shape", "zero_effect")
p1 <- result_df %>%
filter(data_family == fit_family) %>%
filter(divergent_transitions_rel == 0) %>%
filter(rhat_b_x <= 1.01) %>%
filter(ess_bulk_b_x > 400) %>%
filter(ess_tail_b_x > 400) %>%
mutate(sig95 = as.numeric(b_x_2_5pq > 0 | b_x_97_5pq < 0),
zero_effect = ifelse(x_y_coef == 0, "FPR", "TPR")) %>%
group_by(across(all_of(cols))) %>%
summarise(sig95 = mean(sig95)) %>%
ggplot() +
geom_bar(aes(data_family, x = sig95), stat = "identity") +
geom_vline(xintercept = 0.05) +
geom_vline(xintercept = 0.95) +
facet_grid(zero_effect + shape ~ formula) +
ggtitle("95% CI coverage of true x_y_coef") +
ylab("Formula") +
xlab("CI Calibration")
p1
p_thin <- result_df %>%
filter(data_family == fit_family) %>%
filter(shape == "thin") %>%
filter(divergent_transitions_rel == 0) %>%
filter(rhat_b_x <= 1.01) %>%
filter(ess_bulk_b_x > 400) %>%
filter(ess_tail_b_x > 400) %>%
mutate(sig95 = as.numeric(b_x_2_5pq > 0 | b_x_97_5pq < 0),
zero_effect = ifelse(x_y_coef == 0, "FPR", "TPR")) %>%
group_by(across(all_of(cols))) %>%
summarise(sig95 = mean(sig95)) %>%
ggplot() +
geom_bar(aes(data_family, x = sig95), stat = "identity") +
geom_vline(xintercept = 0.05) +
geom_vline(xintercept = 0.95) +
facet_grid(zero_effect + shape ~ formula) +
ggtitle("95% CI coverage of true x_y_coef on thin shaped distributions") +
ylab("Likelihoods") +
xlab("CI Calibration")
p_thin
ggsave("~/Bilder/Unbound-Paper-Images/cal_thin.png", width = 230, height = (297/4)*1.2, units = "mm", dpi = 300)
p_wide <- result_df %>%
filter(data_family == fit_family) %>%
filter(shape == "wide") %>%
filter(divergent_transitions_rel == 0) %>%
filter(rhat_b_x <= 1.01) %>%
filter(ess_bulk_b_x > 400) %>%
filter(ess_tail_b_x > 400) %>%
mutate(sig95 = as.numeric(b_x_2_5pq > 0 | b_x_97_5pq < 0),
zero_effect = ifelse(x_y_coef == 0, "FPR", "TPR")) %>%
group_by(across(all_of(cols))) %>%
summarise(sig95 = mean(sig95)) %>%
ggplot() +
geom_bar(aes(data_family, x = sig95), stat = "identity") +
geom_vline(xintercept = 0.05) +
geom_vline(xintercept = 0.95) +
facet_grid(zero_effect + shape ~ formula) +
ggtitle("95% CI coverage of true x_y_coef on wide shaped distributions") +
ylab("Likelihoods") +
xlab("CI Calibration")
p_wide
ggsave("~/Bilder/Unbound-Paper-Images/cal_wide.png", width = 230, height = (297/4)*1.2, units = "mm", dpi = 300)
p_skewed <- result_df %>%
filter(data_family == fit_family) %>%
filter(shape == "skewed") %>%
filter(divergent_transitions_rel == 0) %>%
filter(rhat_b_x <= 1.01) %>%
filter(ess_bulk_b_x > 400) %>%
filter(ess_tail_b_x > 400) %>%
mutate(sig95 = as.numeric(b_x_2_5pq > 0 | b_x_97_5pq < 0),
zero_effect = ifelse(x_y_coef == 0, "FPR", "TPR")) %>%
group_by(across(all_of(cols))) %>%
summarise(sig95 = mean(sig95)) %>%
ggplot() +
geom_bar(aes(data_family, x = sig95), stat = "identity") +
geom_vline(xintercept = 0.05) +
geom_vline(xintercept = 0.95) +
facet_grid(zero_effect + shape ~ formula) +
ggtitle("95% CI coverage of true x_y_coef on skewed shaped distributions") +
ylab("Likelihoods") +
xlab("CI Calibration")
p_skewed
ggsave("~/Bilder/Unbound-Paper-Images/cal_skewed.png", width = 230, height = (297/4)*1, units = "mm", dpi = 300)
